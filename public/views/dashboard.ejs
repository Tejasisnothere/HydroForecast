<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>HydroForecast | Dashboard</title>

  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap');

    :root {
      /* --- Light Theme Palette --- */
      --bg-color: #f4f7fa;
      --card-bg: #ffffff;
      --text-primary: #2c3e50;
      --text-secondary: #7f8c8d;
      --accent-primary: #1abc9c; /* Teal/Green */
      --accent-secondary: #16a085;
      --accent-light: #e8f8f5;
      --border-color: #e8eef3;
    }

    * {
      box-sizing: border-box;
    }

    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 0;
      min-height: 100vh;
      /* Subtle background gradient for depth */
      background: radial-gradient(circle at 50% 10%, #ffffff, var(--bg-color) 70%);
      color: var(--text-primary);
      overflow-x: hidden;
    }

    /* --- Animations --- */
    @keyframes fadeInScale {
      from {
        opacity: 0;
        transform: translateY(20px) scale(0.98);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }

    @keyframes buttonPress {
      from { transform: scale(1); }
      to { transform: scale(0.98); }
    }


    /* --- Header --- */
    header {
      background: var(--card-bg);
      padding: 15px 40px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid var(--border-color);
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
      position: sticky;
      top: 0;
      z-index: 10;
    }

    header h1 {
      font-size: 1.8rem;
      letter-spacing: 1px;
      color: var(--accent-primary);
      margin: 0;
    }

    header a {
      text-decoration: none;
      color: var(--text-secondary);
      background: #f0f3f5;
      border: 1px solid var(--border-color);
      padding: 8px 18px;
      border-radius: 8px;
      transition: all 0.3s;
      font-weight: 500;
      /* Button press effect */
      &:active { animation: buttonPress 0.1s ease-out forwards; }
    }

    header a:hover {
      background: var(--text-secondary);
      color: var(--card-bg);
    }

    /* --- Dashboard Layout --- */
    .dashboard-container {
      padding: 40px;
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-auto-rows: min-content;
      gap: 30px;
      max-width: 1400px;
      margin: 0 auto;
    }

    .card {
      background: var(--card-bg);
      border-radius: 12px;
      padding: 30px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      border: 1px solid var(--border-color);
      transition: 0.3s ease;
      /* Card pop-in animation */
      opacity: 0;
      animation: fadeInScale 0.6s ease-out forwards;
    }

    /* Staggered animation for cards */
    .card:nth-child(1) { animation-delay: 0.1s; }
    .card:nth-child(2) { animation-delay: 0.2s; }
    .card:nth-child(3) { animation-delay: 0.3s; }
    .card:nth-child(4) { animation-delay: 0.4s; }


    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.07);
    }

    .card h2 {
      color: var(--text-primary);
      font-weight: 600;
      margin-top: 0;
      margin-bottom: 20px;
      border-bottom: 1px solid var(--border-color);
      padding-bottom: 10px;
    }

    /* --- Form Styling --- */
    #addTankForm {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
    }

    #tankCity,
    #tankType,
    #addTankForm button {
      grid-column: 1 / -1;
    }

    form input,
    form select {
      width: 100%;
      margin: 0;
      padding: 12px 15px;
      border-radius: 8px;
      border: 1px solid var(--border-color);
      background: #fdfdfd;
      color: var(--text-primary);
      font-size: 15px;
      font-family: 'Poppins', sans-serif;
      transition: all 0.3s;
    }

    form input::placeholder {
      color: #b0bec5;
    }

    form input:focus,
    form select:focus {
      background: var(--card-bg);
      /* Input focus glow effect */
      box-shadow: 0 0 0 2px var(--accent-primary), 0 0 10px rgba(26, 188, 156, 0.4);
      border-color: var(--accent-primary);
      outline: none;
    }

    button {
      margin-top: 10px;
      background: var(--accent-primary);
      border: none;
      color: white;
      padding: 12px 15px;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 500;
      font-family: 'Poppins', sans-serif;
      cursor: pointer;
      transition: all 0.3s;
      width: 100%;
      /* Button press effect */
      &:active { animation: buttonPress 0.1s ease-out forwards; }
    }

    button:hover {
      background: var(--accent-secondary);
      box-shadow: 0 5px 15px rgba(26, 188, 156, 0.3);
    }

    /* --- Tank List Styling --- */
    #tankList {
      list-style: none;
      padding: 0;
      max-height: 400px;
      overflow-y: auto;
      /* Scrollbar styling */
      scrollbar-width: thin;
      scrollbar-color: var(--accent-primary) var(--border-color);
    }
    #tankList::-webkit-scrollbar {
      width: 8px;
    }
    #tankList::-webkit-scrollbar-track {
      background: var(--border-color);
      border-radius: 10px;
    }
    #tankList::-webkit-scrollbar-thumb {
      background-color: var(--accent-primary);
      border-radius: 10px;
      border: 2px solid var(--border-color);
    }


    #tankList li {
      margin: 0;
      padding: 15px 20px;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.2s ease-in-out; /* Smoother transitions */
      cursor: pointer;
      border-left: 4px solid transparent; /* For active state */
    }

    #tankList li:first-child {
      border-top: 1px solid var(--border-color);
    }
    
    #tankList li:hover {
      background: #fcfcfc;
      transform: translateX(3px); /* Subtle slide effect on hover */
    }

    /* Active list item style */
    #tankList li.list-item-active {
      background: var(--accent-light);
      border-left-color: var(--accent-primary);
      font-weight: 500;
      transform: translateX(0); /* Ensure it doesn't slide when active */
    }

    #tankList li strong {
      font-size: 1.1rem;
    }

    .tank-details {
      font-size: 0.9rem;
      color: var(--text-secondary);
      margin-top: 5px;
    }

    .loading-placeholder,
    .empty-placeholder {
      text-align: center;
      font-style: italic;
      color: var(--text-secondary);
      padding: 40px 0;
    }

    #tankList li button {
      background: #f4f7fa;
      color: var(--text-secondary);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 5px 10px;
      font-size: 14px;
      transition: all 0.3s;
      /* Button press effect */
      &:active { animation: buttonPress 0.1s ease-out forwards; }
    }

    #tankList li button:hover {
      background: #e74c3c;
      color: white;
      border-color: #e74c3c;
    }

    /* --- Rainfall & Usage Card Styles --- */
    .forecast-info {
      display: flex;
      align-items: center;
      font-size: 1.2rem;
      margin-bottom: 15px;
    }
    .forecast-info span {
      font-size: 2.5rem;
      margin-right: 15px;
    }
    .forecast-details {
      font-size: 1rem;
      color: var(--text-secondary);
      line-height: 1.6;
    }
    .forecast-details strong {
      color: var(--text-primary);
    }

    .chart-container {
      display: flex;
      justify-content: space-around;
      align-items: flex-end;
      height: 200px;
      border-bottom: 1px solid var(--border-color);
      padding-bottom: 10px;
    }
    .chart-bar {
      width: 12%;
      text-align: center;
    }
    .bar-fill {
      height: 0; /* Set by JS */
      background: var(--accent-primary);
      border-radius: 5px 5px 0 0;
      transition: height 0.5s ease-out; /* Animation for bar height */
    }
    .bar-label {
      font-size: 0.9rem;
      color: var(--text-secondary);
      margin-top: 8px;
    }

    /* --- Footer --- */
    .footer {
      text-align: center;
      margin-top: 40px;
      padding-bottom: 40px;
      color: var(--text-secondary);
      font-size: 14px;
    }

    /* --- Responsive --- */
    @media (max-width: 900px) {
      .dashboard-container {
        grid-template-columns: 1fr;
        padding: 20px;
        gap: 20px;
      }
      /* Reset animation delay for single column layout */
      .card { animation-delay: 0s !important; }
    }
    @media (max-width: 480px) {
      header {
        padding: 15px 20px;
      }
      header h1 {
        font-size: 1.4rem;
      }
      #addTankForm {
        grid-template-columns: 1fr;
      }
      #tankCity,
      #tankCapacity {
        grid-column: auto;
      }
    }
  </style>
</head>
<body>

  <header>
    <h1>üíß HydroForecast</h1>
    <a href="/logout">Logout</a>
  </header>

  <div class="dashboard-container">
    
    <div class="card">
      <h2>Add New Tank</h2>
      <form id="addTankForm">
        <input type="text" id="tankName" placeholder="Tank Name" required />
        <input type="number" id="tankCapacity" placeholder="Capacity (L)" required />
        <input type="text" id="tankCity" placeholder="City" />
        <select id="tankType">
          <option value="Rainwater">Rainwater</option>
          <option value="Groundwater">Groundwater</option>
          <option value="Reservoir">Reservoir</option>
          <option value="Other">Other</option>
        </select>
        <button type="submit">Add Tank</button>
      </form>
    </div>

    <div class="card">
      <h2>Your Tanks</h2>
      <ul id="tankList">
        </ul>
    </div>

    <div class="card">
      <h2>Rainfall Prediction</h2>
      <div class="forecast-info">
        <span>üå¶Ô∏è</span>
        <div>
          <strong id="forecast-city">Select a tank</strong>
          <div id="forecast-amount" style="font-size: 1.5rem; font-weight: 600; color: var(--accent-primary);">- mm</div>
        </div>
      </div>
      <div class="forecast-details">
        <p><strong>Next 24 Hours:</strong> <span id="forecast-24h">--</span></p>
        <p><strong>Next 3 Days:</strong> <span id="forecast-3d">--</span></p>
      </div>
    </div>

    <div class="card">
      <h2>Water Usage (Last 7 Days)</h2>
      <div class="chart-container">
        <div class="chart-bar"><div class="bar-fill" id="bar-6" style="height: 0;"></div><div class="bar-label">Mon</div></div>
        <div class="chart-bar"><div class="bar-fill" id="bar-5" style="height: 0;"></div><div class="bar-label">Tue</div></div>
        <div class="chart-bar"><div class="bar-fill" id="bar-4" style="height: 0;"></div><div class="bar-label">Wed</div></div>
        <div class="chart-bar"><div class="bar-fill" id="bar-3" style="height: 0;"></div><div class="bar-label">Thu</div></div>
        <div class="chart-bar"><div class="bar-fill" id="bar-2" style="height: 0;"></div><div class="bar-label">Fri</div></div>
        <div class="chart-bar"><div class="bar-fill" id="bar-1" style="height: 0;"></div><div class="bar-label">Sat</div></div>
        <div class="chart-bar"><div class="bar-fill" id="bar-0" style="height: 0;"></div><div class="bar-label">Sun</div></div>
      </div>
    </div>

  </div>

  <div class="footer">
    üå¶ HydroForecast ¬© 2025 ‚Äî Predict ‚Ä¢ Preserve ‚Ä¢ Sustain
  </div>

  <script>
    let token;
    try {
      token = document.cookie.split('; ').find(row => row.startsWith('token=')).split('=')[1];
    } catch (e) {
      console.log("Token not found, using mock token.");
      token = "mock_token"; 
    }

    const tankList = document.getElementById("tankList");
    const addTankForm = document.getElementById("addTankForm");

    function selectTank(liElement, tank) {
      const allItems = tankList.querySelectorAll("li");
      allItems.forEach(item => item.classList.remove("list-item-active"));

      liElement.classList.add("list-item-active");

      updateRainfallCard(tank);
      updateUsageChart(tank);
    }

    // --- Function to update rainfall card (mock data) ---
    function updateRainfallCard(tank) {
      const city = tank.location?.city || "Unknown Location";
      // This is still mock data, as we don't have a rainfall API
      const amount = (Math.random() * 20).toFixed(1);
      const amount3d = (Math.random() * 50 + 10).toFixed(1);

      document.getElementById("forecast-city").textContent = `Forecast for ${city}`;
      document.getElementById("forecast-amount").textContent = `${amount} mm`;
      document.getElementById("forecast-24h").textContent = `Chance of light rain.`;
      document.getElementById("forecast-3d").textContent = `Expecting ${amount3d} mm total.`;
    }

    // --- Function to update usage chart (mock data) ---
    function updateUsageChart(tank) {
      // This is still mock data, as we don't have a usage API
      for (let i = 0; i < 7; i++) {
        const bar = document.getElementById(`bar-${i}`);
        if (bar) {
          const usagePercent = (Math.random() * 80 + 10).toFixed(0); // Random height 10-90%
          bar.style.height = `${usagePercent}%`;
        }
      }
    }

    async function fetchTanks() {
      tankList.innerHTML = "<li class='loading-placeholder'>Loading tanks...</li>";
      try {
        const res = await fetch("/api/tanks", {
          headers: { "Authorization": "Bearer " + token }
        });
        if (!res.ok) throw new Error('Failed to fetch tanks');
        const tanks = await res.json();
        
        tankList.innerHTML = ""; 

        if (tanks.length === 0) {
          tankList.innerHTML = "<li class='empty-placeholder'>No tanks found. Add one!</li>";
          return;
        }

        tanks.forEach(tank => {
          const li = document.createElement("li");
          li.innerHTML = `
            <div>
              <strong>${tank.name}</strong>
              <div class="tank-details">
                ${tank.type} | ${tank.capacity} L | ${tank.location?.city || "N/A"}
              </div>
            </div>
            <button onclick="event.stopPropagation(); deleteTank('${tank._id}')">Delete</button>
          `;
          
          li.onclick = () => selectTank(li, tank);

          tankList.appendChild(li);
        });
        
        if(tanks.length > 0) {
          selectTank(tankList.querySelector('li'), tanks[0]);
        }

      } catch (error) {
        console.error(error);
        tankList.innerHTML = "<li class='empty-placeholder'>Error loading tanks.</li>";
      }
    }

    async function addTank(e) {
      e.preventDefault();
      const name = document.getElementById("tankName").value;
      const capacity = document.getElementById("tankCapacity").value;
      const city = document.getElementById("tankCity").value;
      const type = document.getElementById("tankType").value;

      try {
        await fetch("/api/tanks", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + token
          },
          body: JSON.stringify({ name, capacity, city, type })
        });

        addTankForm.reset();
        fetchTanks(); 
      } catch (error) {
        console.error("Failed to add tank:", error);
        alert("Error: Could not add tank.");
      }
    }

    async function deleteTank(id) {
      if (!confirm("Are you sure you want to delete this tank?")) return;
      
      try {
        await fetch(`/api/tanks/${id}`, {
          method: "DELETE",
          headers: { "Authorization": "Bearer " + token }
        });
        fetchTanks(); 
      } catch (error) {
        console.error("Failed to delete tank:", error);
        alert("Error: Could not delete tank.");
      }
    }

    addTankForm.addEventListener("submit", addTank);
    document.addEventListener("DOMContentLoaded", fetchTanks);

  </script>
</body>
</html>